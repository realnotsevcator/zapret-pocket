MODPATH="/data/adb/modules/zapret"
CURLPATH="$MODPATH/curl"

read_link_config() {
    default_value="$1"
    shift
    for name in "$@"; do
        file="$MODPATH/config/$name"
        if [ -f "$file" ] && grep -q '[^[:space:]]' "$file" 2>/dev/null; then
            cat "$file"
            return
        fi
    done
    printf '%s\n' "$default_value"
}

CURRENTSTRATEGY=$(cat "$MODPATH/config/current-strategy" 2>/dev/null || echo "Unknown")
DNSCRYPTENABLE=$(cat "$MODPATH/config/dnscrypt-enable" 2>/dev/null || echo "0")
CLOAKINGUPDATE=$(cat "$MODPATH/config/dnscrypt-cloaking-rules-update" 2>/dev/null || echo "0")
CLOAKINGRULESLINK=$(read_link_config "https://raw.githubusercontent.com/sevcator/dnscrypt-proxy-stuff/refs/heads/main/cloaking-rules.txt" dnscrypt-cloaking-rules-link custom-cloaking-rules-url)
BLOCKEDUPDATE=$(cat "$MODPATH/config/dnscrypt-blocked-names-update" 2>/dev/null || echo "0")
BLOCKEDNAMESLINK=$(read_link_config "https://raw.githubusercontent.com/sevcator/dnscrypt-proxy-stuff/refs/heads/main/blocked-yandex.txt" dnscrypt-blocked-names-link custom-blocked-names-url)
BLOCKEDIPSUPDATE=$(cat "$MODPATH/config/dnscrypt-blocked-ips-update" 2>/dev/null || echo "0")
BLOCKEDIPSLINK=$(read_link_config "https://raw.githubusercontent.com/sevcator/dnscrypt-proxy-stuff/refs/heads/main/blocked-ips.txt" dnscrypt-blocked-ips-link custom-blocked-ips-url)
UPDATEONSTART=$(cat "$MODPATH/config/update-on-start" 2>/dev/null || echo "1")
CUSTOMLINKIPSETV4=$(read_link_config "https://raw.githubusercontent.com/sevcator/zapret-lists/refs/heads/main/ipset-v4.txt" ipset-v4-link custom-ipv4-ranges-url)
CUSTOMLINKIPSETV6=$(read_link_config "https://raw.githubusercontent.com/sevcator/zapret-lists/refs/heads/main/ipset-v6.txt" ipset-v6-link custom-ipv6-ranges-url)
CUSTOMLINKREESTR=$(read_link_config "https://raw.githubusercontent.com/sevcator/zapret-lists/refs/heads/main/reestr_filtered.txt" reestr-link custom-rkn-registry-url)
IPV6ENABLE=$(cat "$MODPATH/config/ipv6-enable" 2>/dev/null || echo "0")
NETWORKTWEAKS=$(cat "$MODPATH/config/network-tweaks" 2>/dev/null || echo "0")
BYPASSCALLS=$(cat "$MODPATH/config/bypass-calls" 2>/dev/null || echo "0")

command_info() {
    echo "--- zapret Pocket ---"
    echo "! Current strategy: $CURRENTSTRATEGY"
    if [ "$UPDATEONSTART" = "1" ]; then
        echo "! Update on start enabled"
    else
        echo "! Update on start disabled"
    fi
    if [ "$CLOAKINGUPDATE" = "1" ]; then
        echo "! DNSCrypt cloaking rules auto-update enabled"
    else
        echo "! DNSCrypt cloaking rules auto-update disabled"
    fi
    if [ "$IPV6ENABLE" = "1" ]; then
        echo "! IPv6 enabled"
    else
        echo "! IPv6 disabled"
    fi
    if [ "$NETWORKTWEAKS" = "1" ]; then
        echo "! Network tweaks enabled"
    else
        echo "! Network tweaks disabled"
    fi
    if [ "$BYPASSCALLS" = "1" ]; then
        echo "! Bypass calls enabled"
    else
        echo "! Bypass calls disabled"
    fi
    echo "------ Available commands ------"
    echo "  * Service control"
    echo "  start    - Start the zapret service"
    echo "  stop     - Stop the zapret service"
    echo "  restart  - Restart the zapret service"
    echo "  toggle   - Toggle the zapret service"
    echo "  setup    - Configure the zapret service"
    echo "  * Hostlists, ipsets and other"
    echo "  update   - Update the module files"
    echo "  search   - Search the domain/ip/cidr"
    echo "  custom   - Add/remove custom list/ipset"
    echo "  import-strategy - Import strategy from URL"
    echo "  cloaking  - Add/remove custom hosts"
    echo "  exclude  - Add/remove exclude list/ipset"
    return 0
}

start_service() {
    if pgrep -f "nfqws" >/dev/null 2>&1; then
        echo "! nfqws is already running"
        return 1
    else
        if [ -x "$MODPATH/service.sh" ]; then
            "$MODPATH/service.sh" >/dev/null 2>&1
            echo "- Service started"
            return 0
        else
            echo "! service.sh not found or not executable"
            return 1
        fi
    fi
}

stop_service() {
    if [ -x "$MODPATH/uninstall.sh" ]; then
        su -c "$MODPATH/uninstall.sh" >/dev/null 2>&1 && echo "- Service stopped" && return 0
        echo "! Failed to stop service"
        return 1
    else
        echo "! uninstall.sh not found or not executable"
        return 1
    fi
}

toggle_service() {
    . "$MODPATH/action.sh" && return 0 || return 1
}

restart_service() {
    stop_service && sleep 1 && start_service && return 0
    return 1
}

setup() {
    mkdir -p "$MODPATH/config"
    UPDATEONSTART="0"
    BYPASSCALLS="0"
    echo "! If the selection is anything other than \"Y\" or \"Yes\", it is considered a negative choice"

    echo -n "- Enable update on start? "
    read response
    case "$(echo "$response" | tr A-Z a-z)" in
        y|yes) echo "- Enabled"; UPDATEONSTART="1" ;;
    esac

    echo -n "- Enable IPv6? "
    read response
    case "$(echo "$response" | tr A-Z a-z)" in
        y|yes)
            echo "- Enabled"
            IPV6ENABLE="1"
        ;;
    esac
    
    echo -n "- Enable Network Tweaks? "
    read response
    case "$(echo "$response" | tr A-Z a-z)" in
        y|yes) echo "- Enabled"; NETWORKTWEAKS="1" ;;
    esac

    echo -n "- Enable bypass calls? "
    read response
    case "$(echo "$response" | tr A-Z a-z)" in
        y|yes) echo "- Enabled"; BYPASSCALLS="1" ;;
    esac

    if [ "$IPV6ENABLE" != "1" ]; then
        echo -n "- Enable DNSCrypt? "
        read response
        case "$(echo "$response" | tr A-Z a-z)" in
            y|yes) echo "- Enabled"; DNSCRYPTENABLE="1" ;;
        esac
    fi

    echo "- Available strategies:"
    find "$MODPATH/strategy" -type f -name "*.sh" 2>/dev/null | while IFS= read -r file; do
        strategy_name=$(basename "$file" .sh)
        echo "  * $strategy_name"
    done

    echo -n "- Enter the strategy name: "
    read user_strategy
    if [ ! -f "$MODPATH/strategy/${user_strategy}.sh" ]; then
        echo "! Invalid or empty strategy, using current: $CURRENTSTRATEGY"
        user_strategy="$CURRENTSTRATEGY"
    else
        echo "- Strategy selected!"
    fi

    if [ "$UPDATEONSTART" = "1" ]; then
        echo -n "- Do you want to change source links for update zapret files? "
        read resp
        case "$(echo "$resp" | tr A-Z a-z)" in
            y|yes)
                echo -n "- Enter link to ipset-v4.txt (leave blank to keep current): "
                read new_ipset_v4
                if [ -n "$new_ipset_v4" ]; then
                    CUSTOMLINKIPSETV4="$new_ipset_v4"
                    echo "- Link updated"
                else
                    echo "- Keeping old link: $CUSTOMLINKIPSETV4"
                fi

                echo -n "- Enter link to ipset-v6.txt (leave blank to keep current): "
                read new_ipset_v6
                if [ -n "$new_ipset_v6" ]; then
                    CUSTOMLINKIPSETV6="$new_ipset_v6"
                    echo "- Link updated"
                else
                    echo "- Keeping old link: $CUSTOMLINKIPSETV6"
                fi

                echo -n "- Enter link to reestr.txt (leave blank to keep current): "
                read new_reestr
                if [ -n "$new_reestr" ]; then
                    CUSTOMLINKREESTR="$new_reestr"
                    echo "- Link updated"
                else
                    echo "- Keeping old link: $CUSTOMLINKREESTR"
                fi
            ;;
        esac
    fi
    
    if [ "$IPV6ENABLE" != "1" ] && [ "$DNSCRYPTENABLE" = "1" ]; then
        echo -n "- Auto-update cloaking rules for DNSCrypt? "
        read resp
        case "$(echo "$resp" | tr A-Z a-z)" in
            y|yes) CLOAKINGUPDATE="1"; echo "- Enabled" ;;
        esac

        echo -n "- Auto-update blocked names for DNSCrypt? "
        read resp
        case "$(echo "$resp" | tr A-Z a-z)" in
            y|yes) BLOCKEDUPDATE="1"; echo "- Enabled" ;;
        esac

        echo -n "- Auto-update blocked IPs for DNSCrypt? "
        read resp
        case "$(echo "$resp" | tr A-Z a-z)" in
            y|yes) BLOCKEDIPSUPDATE="1"; echo "- Enabled" ;;
        esac

        echo -n "- Do you want to change source links for update DNSCrypt files? "
        read resp2
        case "$(echo "$resp2" | tr A-Z a-z)" in
            y|yes)
                echo "! Supported filenames: cloaking-rules.txt, forwarding-rules.txt, blocked-ips.txt, allowed-names.txt, allowed-ips.txt"
                echo -n "- Enter link to cloaking-rules.txt (leave blank to keep current): "
                read new_cloaking
                if [ -n "$new_cloaking" ]; then
                    CLOAKINGRULESLINK="$new_cloaking"
                    echo "- Link updated"
                else
                    echo "- Keeping old link: $CLOAKINGRULESLINK"
                fi

                echo -n "- Enter link to blocked-names.txt (leave blank to keep current): "
                read new_blocking
                if [ -n "$new_blocking" ]; then
                    BLOCKEDNAMESLINK="$new_blocking"
                    echo "- Link updated"
                else
                    echo "- Keeping old link: $BLOCKEDNAMESLINK"
                fi

                echo -n "- Enter link to blocked-ips.txt (leave blank to keep current): "
                read new_blocked_ips
                if [ -n "$new_blocked_ips" ]; then
                    BLOCKEDIPSLINK="$new_blocked_ips"
                    echo "- Link updated"
                else
                    echo "- Keeping old link: $BLOCKEDIPSLINK"
                fi
            ;;
        esac
    fi

    echo "$DNSCRYPTENABLE" > "$MODPATH/config/dnscrypt-enable"
    echo "$user_strategy" > "$MODPATH/config/current-strategy"
    echo "$CLOAKINGUPDATE" > "$MODPATH/config/dnscrypt-cloaking-rules-update"
    echo "$CLOAKINGRULESLINK" > "$MODPATH/config/dnscrypt-cloaking-rules-link"
    rm -f "$MODPATH/config/custom-cloaking-rules-url"
    echo "$BLOCKEDUPDATE" > "$MODPATH/config/dnscrypt-blocked-names-update"
    echo "$BLOCKEDNAMESLINK" > "$MODPATH/config/dnscrypt-blocked-names-link"
    rm -f "$MODPATH/config/custom-blocked-names-url"
    echo "$BLOCKEDIPSUPDATE" > "$MODPATH/config/dnscrypt-blocked-ips-update"
    echo "$BLOCKEDIPSLINK" > "$MODPATH/config/dnscrypt-blocked-ips-link"
    rm -f "$MODPATH/config/custom-blocked-ips-url"
    echo "$UPDATEONSTART" > "$MODPATH/config/update-on-start"
    echo "$CUSTOMLINKIPSETV4" > "$MODPATH/config/ipset-v4-link"
    rm -f "$MODPATH/config/custom-ipv4-ranges-url"
    echo "$CUSTOMLINKIPSETV6" > "$MODPATH/config/ipset-v6-link"
    rm -f "$MODPATH/config/custom-ipv6-ranges-url"
    echo "$CUSTOMLINKREESTR" > "$MODPATH/config/reestr-link"
    rm -f "$MODPATH/config/custom-rkn-registry-url"
    echo "$IPV6ENABLE" > "$MODPATH/config/ipv6-enable"
    echo "$NETWORKTWEAKS" > "$MODPATH/config/network-tweaks"
    echo "$BYPASSCALLS" > "$MODPATH/config/bypass-calls"
    
    echo "- Done! Changes will apply on next start"
    return 0
}

update() {
    . "$MODPATH/update.sh" && return 0 || return 1
}

search() {
    query="$1"
    if [ -z "$query" ]; then
        echo "! No query provided"
        return 1
    fi

    SEARCH_DIRS="$MODPATH/list $MODPATH/ipset"
    total_matches=0
    file_matches=0

    for dir in $SEARCH_DIRS; do
        [ -d "$dir" ] || continue
        for file in "$dir"/*.txt; do
            [ -f "$file" ] || continue
            matches=$(grep -iF "$query" "$file" 2>/dev/null)
            if [ -n "$matches" ]; then
                file_matches=$((file_matches + 1))
                count=$(echo "$matches" | wc -l)
                total_matches=$((total_matches + count))
                echo "  * $(basename "$file") [$count match(es)]:"
                echo "$matches" | sort -u | sed 's/^/    /'
            fi
        done
    done

    if [ "$total_matches" -eq 0 ]; then
        echo "! Nothing found"
        return 1
    else
        echo "- Found $total_matches line(s) in $file_matches file(s)!"
        return 0
    fi
}

import_strategy() {
    url="$1"
    [ -n "$url" ] || { echo "! No URL provided"; return 1; }

    mkdir -p "$MODPATH/strategy"

    filename="${url%%\?*}"
    filename="${filename##*/}"
    [ "${filename##*.}" = "sh" ] || filename="downloaded-$(date +%Y%m%d%H%M%S).sh"

    if "$CURLPATH" -fsSL -o "$MODPATH/strategy/$filename" "$url"; then
        chmod +x "$MODPATH/strategy/$filename"
        echo "- Saved as $filename"
    else
        echo "! Download failed"
        return 1
    fi
}

custom() {
    entry="$1"
    [ -z "$entry" ] && echo "! No domain/IP/CIDR provided" && return 1

    LIST_CUSTOM="$MODPATH/list/custom.txt"
    IPSET_CUSTOM="$MODPATH/ipset/custom.txt"

    mkdir -p "$(dirname "$LIST_CUSTOM")" "$(dirname "$IPSET_CUSTOM")"
    touch "$LIST_CUSTOM" "$IPSET_CUSTOM"

    if grep -Fxq "$entry" "$LIST_CUSTOM" 2>/dev/null || grep -Fxq "$entry" "$IPSET_CUSTOM" 2>/dev/null; then
        for file in "$LIST_CUSTOM" "$IPSET_CUSTOM"; do
            [ -f "$file" ] || continue
            if grep -Fxq "$entry" "$file" 2>/dev/null; then
                grep -Fvx "$entry" "$file" > "$file.tmp" && mv "$file.tmp" "$file"
            fi
        done
        echo "- Removed"
        return 0
    fi

    found_in_other_list=0
    for file in "$MODPATH"/list/*.txt "$MODPATH"/ipset/*.txt; do
        [ -f "$file" ] || continue
        case "$(basename "$file")" in
            custom.txt) continue ;;
        esac
        if grep -Fxq "$entry" "$file" 2>/dev/null; then
            found_in_other_list=1
            break
        fi
    done

    if [ "$found_in_other_list" -eq 1 ]; then
        echo "! Already added in other lists, aborted"
        return 1
    fi

    if echo "$entry" | grep -q "/"; then
        printf '%s\n' "$entry" >> "$IPSET_CUSTOM"
    else
        printf '%s\n' "$entry" >> "$LIST_CUSTOM"
    fi

    echo "- Added"
    return 0
}

exclude() {
    entry="$1"
    [ -z "$entry" ] && echo "! No domain/IP/CIDR provided" && return 1

    LIST_EXCLUDE="$MODPATH/list/exclude.txt"
    IPSET_EXCLUDE="$MODPATH/ipset/exclude.txt"

    mkdir -p "$(dirname "$LIST_EXCLUDE")" "$(dirname "$IPSET_EXCLUDE")"
    touch "$LIST_EXCLUDE" "$IPSET_EXCLUDE"

    if grep -Fxq "$entry" "$LIST_EXCLUDE" 2>/dev/null || grep -Fxq "$entry" "$IPSET_EXCLUDE" 2>/dev/null; then
        for file in "$LIST_EXCLUDE" "$IPSET_EXCLUDE"; do
            [ -f "$file" ] || continue
            if grep -Fxq "$entry" "$file" 2>/dev/null; then
                grep -Fvx "$entry" "$file" > "$file.tmp" && mv "$file.tmp" "$file"
            fi
        done
        echo "- Removed"
        return 0
    fi

    if echo "$entry" | grep -q "/"; then
        printf '%s\n' "$entry" >> "$IPSET_EXCLUDE"
    else
        printf '%s\n' "$entry" >> "$LIST_EXCLUDE"
    fi

    echo "- Added"
    return 0
}

cloaking() {
    val1="$1"
    val2="$2"

    CLOAKING_FILE="$MODPATH/dnscrypt/custom-cloaking-rules.txt"
    GLOBAL_CLOAKING_FILE="$MODPATH/dnscrypt/cloaking-rules.txt"

    if [ -z "$val1" ]; then
        echo "! Usage: cloaking <domain> [replacement]"
        return 1
    fi

    mkdir -p "$(dirname "$CLOAKING_FILE")"
    touch "$CLOAKING_FILE"

    if [ -z "$val2" ]; then
        if grep -E -q "^($val1|\S+\.$val1)\s+" "$CLOAKING_FILE"; then
            sed -i -E "\|^($val1|\S+\.$val1)\s+.*$|d" "$CLOAKING_FILE"
            echo "- Removed"
        else
            echo "! Nothing to remove"
        fi
        return 0
    fi

    line="$val1 $val2"

    if grep -Fxq "$line" "$CLOAKING_FILE"; then
        grep -Fxv "$line" "$CLOAKING_FILE" > "$CLOAKING_FILE.tmp" && mv "$CLOAKING_FILE.tmp" "$CLOAKING_FILE"
        echo "- Removed"
        return 0
    fi

    if grep -Eq "^$val1\s+" "$CLOAKING_FILE" || grep -Eq "^\S+\.$val1\s+" "$CLOAKING_FILE"; then
        echo "! Already added"
        return 1
    fi
    if [ -f "$GLOBAL_CLOAKING_FILE" ]; then
        if grep -Eq "^$val1\s+" "$GLOBAL_CLOAKING_FILE" || grep -Eq "^\S+\.$val1\s+" "$GLOBAL_CLOAKING_FILE"; then
            echo "! Domain or subdomain already exists. Aborted"
            return 1
        fi
    fi

    printf '%s\n' "$line" >> "$CLOAKING_FILE"
    echo "- Added"
    return 0
}

unknown_command() {
    echo "! Unknown command: $1"
    return 1
}

case "$1" in
    ""|help|-help|--help|h|--h|-h) command_info ;;
    start)      start_service ;;
    stop)       stop_service ;;
    toggle)     toggle_service ;;
    restart)    restart_service ;;
    setup)      setup ;;
    update)     update ;;
    search)     search "$2" ;;
    custom)     custom "$2" ;;
    import-strategy) import_strategy "$2" ;;
    exclude)    exclude "$2" ;;
    cloaking)   cloaking "$2" "$3" ;;
    *)          unknown_command "$1" ;;
esac
